
Current hiccups:

Legend:
 > = resolved
 | = avoided, but still seeking a better solution
 - = obsolete

 - 1. Input rendering isn't actually re-rendering the input.
      It diff renders and pads.
      This becomes a problem when selection is in play. For the diff, selection is invisible.

 | 2. Automatic formatting leads to performance issues.
      The larger the input, the slower it gets. Having the hud actively format input apparently
      slows everything down when a larger volume of clojure code is provided.
      Current solution is to explicitly ask for formatting every time you want your code formatted.

 > 3. Seekers don't insert character pairs when a closing character is inserted.

 > 4. Highlighting is coupled with input preparation.
      Separation is required for reuse.

5. The repl isn't efficiently killing apparently long-running (or possibly infinite) processes.

 | 6. Navigate interferes with the suggestion offset.
      When a suggestion is `uncomplete`d, if `ov` is non-zero, navigate
      will kill it briefly. If I try to rebase at some point, the previous-hud
      becomes identical to the current hud.

 | 7. Auto-completion doesn't recognise movement.
      This leads to me using diff-rendering when moving around.
      Ideally I would want to avoid any operation all-together.

8. Syntax highlighting doesn't highlight:
        - special words, like `nil` or `true`

9. Dependency retrieval doesn't show any progress whatsoever.

10. Some key combinations don't work (lanterna problem):
        - ctrl + up
        - ctrl + down
        - ctrl + enter
        - ctrl + backspace

 > 11. Expansion is currently limited only to words.
       It needs to also support expressions.

12. Subsets of input cannot be selected and explicitly formatted.
    The whole input is.

 > 13. Selections of input do not get overridden, when the user types.
       A selected input should be completely overridden when the
       user starts typing.

14. Formatting doesn't issue a warning when invalid code is provided.
    Currently, it just simply ignores the input.
    Use `halfing.result` to compose formatters and display an error
    when it tries to format invalid code.

 > 15. Joining seekers is limited to only 2 now.
       One should be able to join an invariable number of seekers.

 > 16. Preserve and join sort-of do the same thing.
       One ends the line, one keeps it current.
       They are however implemented slightly differently.
       That should not be.

 > 17. Seekers cannot be created from a simple string.
       There's a call to `str->lines` required.

 - 18. Inputs cannot have more than one selection.
       Input selection cardinality is limited to 1.
       It should be possible to have multiple selections
       at one time. Or at least one selection that spans
       multiple ranges.

19. Lines are unbound in their width and height.
    Input lines should have a width and a height limit.
    For performance purposes at least.

 > 20. `complete-hud` rebase (and other things) get repeated.
       In a lot of functions, the `complete-hud` gets rebased
       by means of the `persisted-hud` and `seeker`.
       This happens so much so, that it has become a pattern.
       This needs to be separated and reused. Same for the other things.

 > 21. The template info data are simple strings converted to lines, and not seekers.
       Things like `greeting` and `caret` all become seekers when integrated in the hud.
       Why not define them as seekers from the start, instead of transforming them every time.

 > 22. New lines in multi-pages lead to the page scrolling down after insertion.
       In the upper part of the editor, new lines that are added lead to a downward
       scroll. I believe this is the doing of `navigation`. Essentially,
       what should happen is that, in that case, everything should shifted downwards,
       and not scrolled downwards. You want to essentially maintain the current rendering
       position as long as possible.
       => That's because I always take-last. I always start with the end.
          I don't push existing input down.

 > 23. Dropping the lines at the end still leads to `ov` overflow when autocompletion windows is extended.
       This is due to the fact that these lines were already considered outside the fov. Dropping them means,
       that the suggestion window now simply replaces the unviewable lines.

 > 24. Different rendering strategies interfere with varying selection patterns.
         Most notably this occurs when highlighting parenthesis. In the case of
         diff or (broken) input rendering, the hightlights the came before lines
         are still visible, even after deselection.
         I do wonder if a deselection should sort-of prompt a clean-up render,
         where previous selections get re-rendered.
         That would actually be a rather good strategy.
         Deselection accumulates the affected areas and a clean-up render is performed
         the rendering engine. Re-render would be the only exception. In that case,
         the clean-up operation would be redundant.

 > 25. Decoupled highlighting leads to the disruption of syntax highlighting.
         The explicit re-rendering of previously highlighted text is done
         without considering syntax highlighting. In case that selection was previously
         syntactically highlighted, the re-rendered lacks this characteristic.
         The solution would be to explicitly trigger the state machine also when highlighting.
         More concretely, for any range [x0, y0] - [xe, ye], start from the character at [x0-1, y0]
         and start rendering the syntax from there.

 > 26. Letting pairs of characters be configurable is a waste of time.
       Beside the normal string quotes and parenthesis, there isn't really any
       other relevant thing to pair-insert. Just use these things directly.
       And expansion doesn't work accurately. For example: ( ""_>).
       If cursor at `_>`, then the expansion with select `"` and ")" respectively.

 > 27. Highlighting currently doesn't support different colourschemes.
         To support various highlighting methods, the colourscheme must be
         easily interchangable.

 > 28. Highlight states with the same start and end transition condition (like string)
       produce syntax highlighting artifacts after clean-up.
       After clean-up, syntax highlighting is essentially resumed based on the context
       of the last character from which the selection started. In the case of a string,
       you cannot really distinguish locally between start and finish, such that,
       after highlighting the tail of a string, including `"`, then the highlighter
       starts in the string state and proceeds to highlight the rest as a string.
       => for " asds"), where ds") were highlighted, after cleanup, both " and ) are
       green.

 > 29. Inconsistencies between the raw and normal seeker lead to problems after auto-completion
       and re-formatting.
       Because formatted seekers essentially have more than raw ones, discrepancies between cursor
       positions can occur.

 > 30. Calibration normalises ov in a rather ad-hoc manner, which I don't know if it always works.
       Think about and add more concrete guards for the top and bottom of the page, that more
       accurately and invariantly detect page movement.

 > 31. Errors are not reported anywhere.
       If something wrong happens internally, this has to be written into an error log.
       I tend to think that the application should also die gracefully after such an occurrence.
       The user should however be informed.
       Don't capture errors in the hud and display them, but rather propagate them to `core`,
       print that something wrong happened, publish error and then exit.

 | 32. Test `can-be` macro doesn't display the compared values, which leads to confusion when
       trying to find out what went wrong.
       Try to make the macro pre-evaluate the values and display them appropriately.
       (Can't necessarily improve)

 > 33. Extraction seems to be very inefficient. In the tests, it takes quite a lot of time.
       I believe it is due to the fact, that it sequentially deletes everything around
       a selected area, instead of just selecting the area and taking it out.
       And i also believe this is further due to the fact, that delete seems to be
       slower than it should. The tests for delete also take noticeably longer than
       expected. Try to optimise them.

 > 34. Parens-matching seems to not always match correctly.
          Example:
             (defn bla [coll n] (dotimes [_ n])(let [_ 1])
          This will match `(` from `defn` with the `)` next to `let [_ 1]`
          The problem is that I don't take into account the fact that an expansion
          might not be total. When highlighting parens, a partial expansion means that
          there is no pair. This means that I need to somehow elegantly propagate
          the fact that an expansion was total, and use it in
          the other functions appropriately.
          Problem: Because this thing starts with a 0, if all the pairs following it
          are complete, then it succeeds with a 0, even though the inital one hadn't been closed.

35. Refactor expansion and make more reusable.

36. Currently, expansion stops if an unmatched parens is seen.
    This means, that should a rogue parens happen to find
    itself somewhere in the seeker, and a selection expansion is made,
    then the selection expands up to that parens.
    Should I leave it like this (might indirectly help the user realise he
    made a mistake), or should i let the expansion go until the end?

 > 37. Seekers don't share clipboards in hud.

 > 38. Apparently, in the generated `.jar` file, `ritz` either doesn't see or doesn't
       bother with the current namespace and, as such, doesn't suggest functions
       that were defined within the repl. If I run the project directly with `lein`,
       it does however.

 > 39. In the case of a multi-page, where the cursor is at the top and some of
       the text is obscured by the fov, deleting as much text as to
       bring the bottom into view leads to rendering artifacts.
       The a section of the bottom obscured text doesn't get re-rendered when it comes into view.
       When selecting it (or forcing a total re-render), it appears again.

 > 40. Changes from the repl history don't get calibrated.

41. There seems to be a problem when reading from history.
    Do a bunch a println's in an expression, evaluate, exit and then restart reading from history.
    Error: omnia.input.Seeker cannot be cast to java.lang.Number

Prospects:

- Parenthesis highlighting // done
- Input configuration // done
- REPL sessions // done
- Tests for input and hud // done
- Look-ahead syntax highlighter
- Undo and redo
- Parametricity and arity lookup
- I-search
- Refactor and reuse
- Move to unrepl and unravel?
- Documentation
- ClojureDoc support
- More efficient seeker
- Command mode (with input filtering)
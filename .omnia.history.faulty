["(m-do [a 1\n       b 2]\n (+ a b))\n" "(m-do [a 1\n       _ (when (neg? a) (fail \"Negative\"))\n       b 2]\n (+ a b))\n" "(m-do [a -1\n       _ (when (neg? a) (fail \"Negative\"))\n       b 2]\n (+ a b))\n" "(defn fail [message] (t/from-result (r/attempt (throw (Exception. message))0)))\n" "(m-do [a -1\n       _ (when (neg? a) (fail \"Negative\"))\n       b 2]\n (+ a b))\n" "(m-do [a (throw (Exception. \"HA\"))\n       b 2]\n (+ a b))\n" "(require '[halfling.result :as r]\n '[halfling.task :as t])\n" "(defn fail [message] (t/from-result (r/attempt (throw (Exception. \"HA\")))))\n" "(defmacro m-let [bindings & body]\n `(-> \n   (t/do-tasks ~bindings ~@body)\n   (t/run)\n   (r/get!)))\n" "(m-let [a 1\n        _ (when (neg? a) (fail \"Negative\"))\n        b 2]\n (+ a b))\n" "(m-let [a -1\n        _ (when (neg? a) (fail \"Negative\"))\n        b 2]\n (+ a b))\n" "(m-let [a -1\n        _ (when (neg? a) (fail \"Negative\"))\n        b 2]\n (+ a b))\n" "(defn eff [] (throw (Exception. \"HA\")))\n\n(m-let [a (eff)\n        b 2]\n (+ a b))\n" "(seq nil)\n" "(+ 1 1)\n" "(println \"HAI\")\n" "(\n" "(\n" "(\n" "(\n" "(\n" "(\n" "(\n" "(\n" "(\n" "(\n" "(\n" "(\n" "(\n" "(\n" "(repeatedly 12 (rand-int))\n" "(repeatedly 12 (rand-int 1))\n" "(repeatedly (rand-int 1) 12)\n" "(repeatedly #(rand-int 1) 12)\n" "(repeatedly 12 #(rand-int 10))\n" "(\n" "(\n" "(\n" "(\n" "(\n" "(\n" "(\n" "(+ 1 1)\n" "(defn hello [x]\n (println x))\n" "(hello \"ROBERT\")\n" "asd\nad\nwq\n\nwd\nqd\nsa\nd\nda\nd\n\n\nq\nwd\nwd\na\nd\nds\nad\nsd\n\ndwq\ndq\nd\na\nas\ndas\nd\n(print-dup \"HA\")\n" "(println \"HA\")\n" "(println \"HA\")\n" "(println \"HA\")\n" "(println \"HA\")\n" "(println \"HA\")\n" "(println \"HA\")\n" "(println \"HA\")\n" "(println \"HA\")\n" "(println \"HA\")\n" "(println \"HA\")\n" "(println \"HA\")\n" "(println \"HA\")\n" "(println \"HA\")\n" "(println \"HA\")\n" "(println \"HA\")\n" "(println \"HA\")\n" "(println \"HA\")\n" "(println \"HA\")\n" "(println \"HA\")\n" "(println \"HA\")\n" "(println \"HA\")\n" "(println \"HA\")\n" "(println \"HA\")\n" "(println \"HA\")\n" "(println \"HA\")\n" "(println \"HA\")\n" "(println \"HA\")\n" "(println \"HA\")\n" "(println \"HA\")\n" "(println \"HA\")\n" "(println \"HA\")\n" "(println \"HA\")\n" "(println \"HA\")\n" "(println \"HA\")\n" "(println \"HA\")\n" "(println \"HA\")\n" "(println \"HA\")\n" "(println \"HA\")\n" "(println \"HA\")\n" "(println \"HA\")\n" "(println \"HAO\")\n" "(println-str \"HA\")\n" "(defn bla [x]\n (println x))\n" "(bla \"HA\")\n" "(defn hello [x]\n (println x))\n" "(hello \"ROBERT\")\n" "(dotimes [_ 4]\n (println \"HA\"))\n" "(do \n(println \"A\")\n(println \"A\")\n(println \"A\")\n(println \"A\")\n(println \"A\")\n(println \"A\")\n(println \"A\")\n(println \"A\")\n(println \"A\")\n(println \"A\")\n(println \"A\")\n(println \"A\")\n(println \"A\")\n(println \"A\")\n(println \"A\")\n(println \"A\")\n(println \"A\")\n(println \"A\")\n(println \"A\")\n(println \"A\")\n(println \"A\")\n(println \"A\")\n(println \"A\")\n(println \"A\")\n(println \"A\")\n(println \"A\")\n(println \"A\")\n(println \"A\")\n(println \"A\")\n(println \"A\")\n(println \"A\")\n(println \"A\"))\n" "(do \n(println \"A\")\n(println \"A\")\n(println \"A\")\n(println \"A\")\n(println \"A\")\n(println \"A\")\n(println \"A\")\n(println \"A\")\n(println \"A\")\n(println \"A\")\n(println \"A\")\n(println \"A\")\n(println \"A\")\n(println \"A\")\n(println \"A\")\n(println \"A\")\n(println \"A\")\n(println \"A\")\n(println \"A\")\n(println \"A\")\n(println \"A\")\n(println \"A\")\n(println \"A\")\n(println \"A\")\n(println \"A\")\n(println \"A\")\n(println \"A\")\n(println \"A\")\n(println \"A\")\n(println \"A\")\n(println \"A\")\n(println \"A\"))\n" "(def x {:a nil})\n\n(when-let [a (:a x)]\n (println a))\n" "(def x {:a nil})\n\n(when-let [a (:a x)]\n (str a))\n" "(def x {:a nil})\n\n(if-let [a (:a x)]\n(println a)\n(println \"HA\"))\n" "(case (:a {:a 1})\n 1 (println \"JA\")\n nil (println \"NIL\")\n(println \"HA\"))\n" "(case (:a {:b 1})\n 1 (println \"JA\")\n nil (println \"NIL\")\n(println \"HA\"))\n"]